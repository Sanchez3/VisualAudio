{"version":3,"sources":["webpack:///./src/assets/js/main.js"],"names":["__webpack_require__","r","__webpack_exports__","audioContext","sourceNode","analyserNode","javascriptNode","dat_gui__WEBPACK_IMPORTED_MODULE_0__","window","AudioContext","webkitAudioContext","mozAudioContext","dataArray","startedAt","pausedAt","audioData","audioPlaying","sampleSize","e","alert","onError","playSound","buffer","Date","now","start","loop","h5","FizzyText","drawBar","drawWave","barColor","waveColor","play","url","request","createBufferSource","createAnalyser","createScriptProcessor","Uint8Array","frequencyBinCount","connect","destination","onaudioprocess","ticker","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","pause","stop","initGUI","that","this","gui","f1","addFolder","setChecked","prop","n","add","listen","onChange","addColor","f2","initAudioCanvas","app","PIXI","Application","width","height","document","getElementById","appendChild","view","w","h","graphics","Graphics","basicText","Text","fill","x","y","stage","addChild","clear","Ticker","deltaTime","getByteTimeDomainData","bufferLength","sliceWidth","beginFill","lineStyle","i","moveTo","lineTo","endFill","getByteFrequencyData","barWidth","barHeight","drawRect","isPc","userAgentInfo","navigator","userAgent","Agents","Array","flag","v","length","indexOf","rootResize","wFsize","wWidth","screen","innerWidth","wHeight","innerHeight","getElementsByTagName","style","fontSize","eventInit","addEventListener","passive","preventDefault","cssInit","interval","timeout","end","lastInnerWidth","lastInnerHeight","noChangeCount","clearInterval","clearTimeout","setInterval","setTimeout","init"],"mappings":"kHAAAA,EAAAC,EAAAC,GAAA,IAmCAC,EAEAC,EACAC,EACAC,EAvCAC,EAAAP,EAAA,QAAAA,EAAA,QAAAA,EAAA,QA8BAQ,OAAAC,aACAD,OAAAE,oBAAAF,OAAAC,cAAAD,OAAAG,gBAUA,IAGAC,EACAC,EACAC,EALAC,EAAA,KACAC,EAAA,MACAC,EAAA,KAmBA,IACAd,EAAA,IAAAM,aACC,MAAAS,GACDC,MAAA,+CAIA,SAAAC,EAAAF,IAoBA,SAAAG,EAAAC,GACAlB,EAAAkB,SAEAR,GACAD,EAAAU,KAAAC,MAAAV,EACAV,EAAAqB,MAAA,EAAAX,EAAA,OAEAD,EAAAU,KAAAC,MACApB,EAAAqB,MAAA,IAGArB,EAAAsB,KAAA,KACAV,EAAA,KAMAR,OAAAmB,IACAC,WACAC,QAAA,MACAC,SAAA,KACAC,SAAA,SACAC,UAAA,SACAC,KAAA,WAtCA,IAAAC,EACAC,EAsCAnB,IAhEAZ,EAAAD,EAAAiC,qBACA/B,EAAAF,EAAAkC,iBACA/B,EAAAH,EAAAmC,sBAAArB,EAAA,KAEAL,EAAA,IAAA2B,WAAAlC,EAAAmC,mBAEApC,EAAAqC,QAAAtC,EAAAuC,aACAtC,EAAAqC,QAAApC,GACAA,EAAAoC,QAAAnC,GACAA,EAAAmC,QAAAtC,EAAAuC,aA+DApC,EAAAqC,eAAA,WAGA,MAAA3B,GAGAR,OAAAmB,GAAAiB,OAAAnB,SAKA,MAAAV,GA1DAmB,EA5BA,2BA6BAC,EAAA,IAAAU,gBACAC,KAAA,MAAAZ,EAAA,MACAC,EAAAY,aAAA,cAEAZ,EAAAa,OAAA,WACA7C,EAAA8C,gBAAAd,EAAAe,SAAA,SAAA5B,GAEAD,EADAN,EAAAO,IAESF,IAETe,EAAAgB,QAkDA9B,EAAAN,KASAqC,MAAA,WACAhD,EAAAiD,KAAA,GACArC,EAAA,MACAF,EAAAS,KAAAC,MAAAX,IAKAyC,QAAA,WACA,IAAAC,EAAAC,KACAC,EAAA,IAAsBlD,EAAA,EACtBmD,EAAAD,EAAAE,UAAA,YAEA,SAAAC,EAAAC,GACA,IAAAC,EAAAP,EAAA3B,UAAAiC,GACAC,IACAP,EAAA3B,UAAA,cACA2B,EAAA3B,UAAA,gBAEA2B,EAAA3B,UAAAiC,GAAAC,EAEAJ,EAAAK,IAAAR,EAAA3B,UAAA,YAAAoC,SAAAC,SAAA,WACAL,EAAA,cAEAF,EAAAQ,SAAAX,EAAA3B,UAAA,aAEA,IAAAuC,EAAAV,EAAAE,UAAA,iBACAQ,EAAAJ,IAAAR,EAAA3B,UAAA,WAAAoC,SAAAC,SAAA,WACAL,EAAA,aAEAO,EAAAD,SAAAX,EAAA3B,UAAA,YAEA6B,EAAAM,IAAAR,EAAA3B,UAAA,QACA6B,EAAAM,IAAAR,EAAA3B,UAAA,UAGAwC,gBAAA,WACA,IAAAb,EAAAC,KAkCAa,EAAA,IAAAC,KAAAC,aAAwCC,MAAA,IAAAC,OAAA,MAExCC,SAAAC,eAAA,kBAAAC,YAAAP,EAAAQ,MACA,IAAAC,EAAA,IACAC,EAAA,IACAC,EAAA,IAAAV,KAAAW,SAEAC,EAAA,IAAAZ,KAAAa,KAAA,+BAAsEC,KAAA,SACtEF,EAAAG,EAAA,GACAH,EAAAI,EAAA,GAEAjB,EAAAkB,MAAAC,SAAAN,GAGAF,EAAAS,QAEApB,EAAAkB,MAAAC,SAAAR,GA2DAzB,EAAAX,OAAA,IAAA0B,KAAA1B,OAAA8C,OACAnC,EAAAX,OAAAS,OACAE,EAAAX,OAAAmB,IAAA4B,IAEApC,EAAA3B,UAAAE,SAjCA,WAIAzB,EAAAuF,sBAAAhF,GAEA,IAAAiF,EAAAxF,EAAAmC,kBACAwC,EAAAS,QACA,IAAAK,EAAA,EAAAhB,EAAAe,EACAR,EAAA,EACAL,EAAAe,YACAf,EAAAgB,UAAA,EAAAzC,EAAA3B,UAAAI,UAAA,GAEA,QAAAiE,EAAA,EAA2BA,EAAAJ,EAAkBI,IAAA,CAC7C,IACAX,EADA1E,EAAAqF,GAAA,IACAlB,EAAA,EAEA,IAAAkB,EAEAjB,EAAAkB,OAAAb,EAAAC,GAEAN,EAAAmB,OAAAd,EAAAC,GAEAD,GAAAS,EAEAd,EAAAmB,OAAArB,EAAAC,EAAA,GACAC,EAAAoB,UAQAtE,GAGAyB,EAAA3B,UAAAC,SAjEA,WAMAxB,EAAAgG,qBAAAzF,GAEA,IAAAiF,EAAAxF,EAAAmC,kBAEAwC,EAAAS,QACAT,EAAAe,UAAAxC,EAAA3B,UAAAG,UAMA,IAJA,IAAAuE,EAAAxB,EAAAe,EAAA,GACAU,EAAA,EACAlB,EAAA,EAEAY,EAAA,EAA2BA,EAAAJ,EAAkBI,IAG7CM,EAAA3F,EAAAqF,GACAjB,EAAAwB,SAAAnB,EAAAN,EAAA,EAAAwB,EAAA,EAAAD,EAAAC,EAAA,GAEAlB,GAAAiB,EAAA,EA2CAzE,MAgBA4E,KAAA,WAIA,IAHA,IAAAC,EAAAC,UAAAC,UACAC,EAAA,IAAAC,MAAA,8DACAC,EAAA,KACAC,EAAA,EAAuBA,EAAAH,EAAAI,OAAmBD,IAC1C,GAAAN,EAAAQ,QAAAL,EAAAG,IAAA,GAAuDD,EAAA,MAAc,MAErE,OAAAA,GAEAI,WAAA,WACA,IAAAC,EAGAC,EAAA7G,OAAA8G,OAAA9C,MAAA,IAAAhE,OAAA+G,YAAA/G,OAAA8G,OAAA9C,OAAA,GAAAhE,OAAA+G,YAAAD,OAAA9C,MACAhE,OAAA+G,WACAC,EAAAhH,OAAA8G,OAAA7C,OAAA,IAAAjE,OAAAiH,aAAAjH,OAAA8G,OAAA7C,QAAA,GAAAjE,OAAAiH,aACAjH,OAAA8G,OAAA7C,OAAAjE,OAAAiH,YAKAL,EADAC,EAAAG,EACAA,EAAA,QAEAH,EAAA,QAEA3C,SAAAgD,qBAAA,WAAAC,MAAAC,SAAAR,EAAA,MAEAS,UAAA,WAMA,OAJAnD,SAAAoD,iBAAA,sBAAA5G,MAAiE6G,QAAA,QACjErD,SAAAoD,iBAAA,qBAAA5G,GACAA,EAAA8G,mBACYD,QAAA,QAJZvE,MAOAyE,QAAA,WACA,IAAA1E,EAAAC,KAsCA,OAnCAD,EAAA4D,aACA3G,OAAAsH,iBAAA,wBAAAtH,OAAA,wCACA,IAAA0H,EACAC,EACAC,EACAC,EACAC,EACAC,EACAH,EAAA,WAEAI,cAAAN,GACAO,aAAAN,GACAD,EAAA,KACAC,EAAA,KACA5E,EAAA4D,cAEAe,EAAAQ,YAAA,WACAlI,OAAA+G,aAAAc,GAAA7H,OAAAiH,cAAAa,EAnBA,QAoBAC,GAGAH,KAGAC,EAAA7H,OAAA+G,WACAe,EAAA9H,OAAAiH,YACAc,EAAA,KAGAJ,EAAAQ,WAAA,WAEAP,KAhCA,OAoCA7E,GAEAqF,KAAA,WACApF,KACAyE,UAAAJ,YADArE,KAEAF,UAFAE,KAGAY,oBAGA5D,OAAAwC,OAAA,WACAxC,OAAAmB,GAAAiH","file":"assets/js/main.c30492d48ce7085cf046.js","sourcesContent":["/**\n * Created by sanchez \n */\n'use strict';\n\n//check the environment\n// if (process.env.NODE_ENV !== 'production') {\n//     console.log('Looks like we are in development mode!');\n// }\nimport * as dat from 'dat.gui';\n// import CSS\n\nimport css from '../css/css.css';\n\n\n//ES6 Module\nimport 'pixi.js';\n// import * as Tone from 'tone';\n\n\n// var player = new Tone.Player({\n//     \"url\": \"/assets/media/bgm1.mp3\",\n//     \"loop\": true\n// }).toMaster();\n\n// var fft = new Tone.Analyser('fft', 64);\n// player.fan(fft);\n// var fftArray = fft.getValue()\n\n\nwindow.AudioContext = (function() {\n    return window.webkitAudioContext || window.AudioContext || window.mozAudioContext;\n})();\n\n// Global Variables for Audio\nvar audioContext;\nvar audioBuffer;\nvar sourceNode;\nvar analyserNode;\nvar javascriptNode;\nvar source;\nvar audioData = null;\nvar audioPlaying = false;\nvar sampleSize = 1024; // number of samples to collect before analyzing data\nvar dataArray; // array to hold time-domain/byte-frequency data\nvar startedAt;\nvar pausedAt;\nvar audioUrl = './assets/media/bgm1.mp3';\n\nfunction setupAudioNodes() {\n    sourceNode = audioContext.createBufferSource();\n    analyserNode = audioContext.createAnalyser();\n    javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n    // Create the array for the data values\n    dataArray = new Uint8Array(analyserNode.frequencyBinCount);\n    // Now connect the nodes together\n    sourceNode.connect(audioContext.destination);\n    sourceNode.connect(analyserNode);\n    analyserNode.connect(javascriptNode);\n    javascriptNode.connect(audioContext.destination);\n}\n\ntry {\n    audioContext = new AudioContext();\n} catch (e) {\n    alert('Your browser does not support AudioContext!');\n    console.error(e);\n}\n\nfunction onError(e) {\n    console.log(e);\n}\n\n//Load the audio from the URL via Ajax and store it in global variable audioData\n//Note that the audio load is asynchronous\nfunction loadSound(url) {\n    var request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n    // When loaded, decode the data and play the sound\n    request.onload = function() {\n        audioContext.decodeAudioData(request.response, function(buffer) {\n            audioData = buffer;\n            playSound(audioData);\n        }, onError);\n    }\n    request.send();\n}\n//Play the audio and loop until stopped\nfunction playSound(buffer) {\n    sourceNode.buffer = buffer;\n\n    if (pausedAt) {\n        startedAt = Date.now() - pausedAt;\n        sourceNode.start(0, pausedAt / 1000);\n    } else {\n        startedAt = Date.now();\n        sourceNode.start(0); // Play the sound now\n    }\n   \n    sourceNode.loop = true;\n    audioPlaying = true;\n}\n\n\n\nvar audioLoaded = false;\nwindow.h5 = {\n    FizzyText: {\n        drawBar: false,\n        drawWave: true,\n        barColor: 0xFFFFFF,\n        waveColor: 0xFFFFFF,\n        play: function() {\n            if (audioPlaying) return;\n\n            // var audio = document.getElementById('audio');\n            // audio.play();\n            //Set up the audio Analyser, the Source Buffer and javascriptNode\n            setupAudioNodes();\n            //setup the event handler that is triggered every time enough samples have been collected\n            //trigger the audio analysis and draw the results\n            javascriptNode.onaudioprocess = function() {\n\n                //draw the display if the audio is playing\n                if (audioPlaying == true) {\n                    // requestAnimFrame(drawTimeDomain);\n                    // console.log(window.h5.ticker)\n                    window.h5.ticker.start();\n\n                }\n            }\n            //Load the Audio the first time through, otherwise play it from the buffer\n            if (audioData == null) {\n                loadSound(audioUrl);\n            } else {\n                playSound(audioData);\n            }\n\n            //tone.js\n            // player.load('/assets/media/bgm1.mp3',function(){\n            //     player.start();\n            //     audioLoaded=true\n            // })\n        },\n        pause: function() {\n            sourceNode.stop(0);\n            audioPlaying = false;\n            pausedAt = Date.now() - startedAt;\n            // var audio = document.getElementById('audio');\n            // audio.pause();\n        }\n    },\n    initGUI: function() {\n        var that = this;\n        var gui = new dat.GUI();\n        var f1 = gui.addFolder('SineWave');\n\n        function setChecked(prop) {\n            var n = that.FizzyText[prop];\n            if (n) {\n                that.FizzyText['drawBar'] = false;\n                that.FizzyText['drawWave'] = false;\n            }\n            that.FizzyText[prop] = n;\n        }\n        f1.add(that.FizzyText, 'drawWave').listen().onChange(function() {\n            setChecked('drawWave')\n        });\n        f1.addColor(that.FizzyText, 'waveColor');\n\n        var f2 = gui.addFolder('Frequency Bar')\n        f2.add(that.FizzyText, 'drawBar').listen().onChange(function() {\n            setChecked('drawBar')\n        });;\n        f2.addColor(that.FizzyText, 'barColor');\n\n        gui.add(that.FizzyText, 'play');\n        gui.add(that.FizzyText, 'pause');\n\n    },\n    initAudioCanvas: function() {\n        var that = this;\n\n\n\n\n        // var analyser = audioCtx.createAnalyser();\n        // // analyser.connect(audioCtx.destination);\n        // //确定频域的FFT的大小\n        // analyser.fftSize = 2048;\n        // //fftSize一半，用于可视化的数据量的数量\n        // var bufferLength = analyser.frequencyBinCount;\n        // //创建无符号字节数组\n        // var dataArray = new Uint8Array(bufferLength);\n        // var audio = document.getElementById('audio');\n        // source = audioCtx.createMediaElementSource(audio);\n        // source.connect(analyser);\n\n        // audio.addEventListener('canplaythrough', function() {\n        //     audio.removeEventListener('canplaythrough', this);\n        //     source = audioCtx.createMediaElementSource(audio);\n        //     source.connect(analyser);\n        //     analyser.connect(audioCtx.destination);\n        //     audioLoaded = true;\n        // })\n\n\n\n        //当前频域数据\n        // analyser.getByteFrequencyData(dataArray)\n\n        //将当前波形，或者时域数据拷贝\n        // analyser.getByteTimeDomainData(dataArray);\n\n        //Create a Pixi Application\n        var app = new PIXI.Application({ width: 800, height: 600 });\n        //Add the canvas that Pixi automatically created for you to the HTML document\n        document.getElementById('canvas-wrapper').appendChild(app.view);\n        var w = 800;\n        var h = 600;\n        var graphics = new PIXI.Graphics();\n\n        var basicText = new PIXI.Text('Note: Mobile for now too!!!', { fill: '#FFF' });\n        basicText.x = 10;\n        basicText.y = 10;\n\n        app.stage.addChild(basicText);\n\n\n        graphics.clear();\n\n        app.stage.addChild(graphics);\n\n        function drawBar() {\n\n            //tone.js\n            // var fftValues = fft.getValue ();\n            //get frequency data and put it into the array created above\n            //当前频域数据\n            analyserNode.getByteFrequencyData(dataArray);\n            // console.log(dataArray)\n            var bufferLength = analyserNode.frequencyBinCount;\n\n            graphics.clear();\n            graphics.beginFill(that.FizzyText.barColor);\n\n            var barWidth = (w / bufferLength) * 10;\n            var barHeight = 0;\n            var x = 0;\n\n            for (var i = 0; i < bufferLength; i++) {\n                //tone.js\n                // barHeight = fftValues[i]/255 * h;\n                barHeight = dataArray[i];\n                graphics.drawRect(x, h / 2 - barHeight / 2, barWidth, barHeight / 2);\n\n                x += barWidth + 1;\n            }\n\n        }\n\n        function drawWave() {\n\n            //get waveform data and put it into the array created above\n            //将当前波形，或者时域数据拷贝\n            analyserNode.getByteTimeDomainData(dataArray);\n\n            var bufferLength = analyserNode.frequencyBinCount;\n            graphics.clear();\n            var sliceWidth = w * 1.0 / bufferLength;\n            var x = 0;\n            graphics.beginFill();\n            graphics.lineStyle(2, that.FizzyText.waveColor, 1);\n            // console.log(dataArray)\n            for (var i = 0; i < bufferLength; i++) {\n                var v = dataArray[i] / 128.0;\n                var y = v * h / 2;\n\n                if (i === 0) {\n                    // graphics.clear();\n                    graphics.moveTo(x, y);\n                } else {\n                    graphics.lineTo(x, y);\n                }\n                x += sliceWidth;\n            }\n            graphics.lineTo(w, h / 2);\n            graphics.endFill();\n        }\n\n        that.ticker = new PIXI.ticker.Ticker();\n        that.ticker.stop();\n        that.ticker.add((deltaTime) => {\n\n            if (that.FizzyText.drawWave) {\n                drawWave();\n                return;\n            }\n            if (that.FizzyText.drawBar) {\n                drawBar();\n                return;\n            }\n        });\n        // ticker.start();\n        // audio.play();\n        // audio.addEventListener('play', function() {\n        //     console.log('play');\n        //     ticker.start();\n        // })\n        // audio.addEventListener('pause', function() {\n        //     console.log('pause');\n        //     // ticker.stop();\n        // })\n\n    },\n    isPc: function() {\n        var userAgentInfo = navigator.userAgent;\n        var Agents = new Array('Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod');\n        var flag = true;\n        for (var v = 0; v < Agents.length; v++) {\n            if (userAgentInfo.indexOf(Agents[v]) > 0) { flag = false; break; }\n        }\n        return flag;\n    },\n    rootResize: function() {\n        var wFsize;\n\n        //iphone6/6s/7/8 orientation=portrait screen.width=750px screen.height=1334px / WeChat window.innerWidth=750px window.innerHeight=1206px \n        var wWidth = (window.screen.width > 0) ? (window.innerWidth >= window.screen.width || window.innerWidth == 0) ? screen.width :\n            window.innerWidth : window.innerWidth;\n        var wHeight = (window.screen.height > 0) ? (window.innerHeight >= window.screen.height || window.innerHeight == 0) ?\n            window.screen.height : window.innerHeight : window.innerHeight;\n        // var wWidth = window.innerWidth;\n        // var wHeight = window.innerHeight;\n\n        if (wWidth > wHeight) {\n            wFsize = wHeight / 750 * 100;\n        } else {\n            wFsize = wWidth / 750 * 100;\n        }\n        document.getElementsByTagName('html')[0].style.fontSize = wFsize + 'px';\n    },\n    eventInit: function() {\n        var that = this;\n        document.addEventListener('touchstart', function(e) {}, { passive: false });\n        document.addEventListener('touchmove', function(e) {\n            e.preventDefault();\n        }, { passive: false });\n        return that;\n    },\n    cssInit: function() {\n        var that = this;\n        var noChangeCountToEnd = 100,\n            noEndTimeout = 1000;\n        that.rootResize();\n        window.addEventListener('onorientationchange' in window ? 'orientationchange' : 'resize', function() {\n            var interval,\n                timeout,\n                end,\n                lastInnerWidth,\n                lastInnerHeight,\n                noChangeCount;\n            end = function() {\n                // \"orientationchangeend\"\n                clearInterval(interval);\n                clearTimeout(timeout);\n                interval = null;\n                timeout = null;\n                that.rootResize();\n            };\n            interval = setInterval(function() {\n                if (window.innerWidth === lastInnerWidth && window.innerHeight === lastInnerHeight) {\n                    noChangeCount++;\n                    if (noChangeCount === noChangeCountToEnd) {\n                        // The interval resolved the issue first.\n                        end();\n                    }\n                } else {\n                    lastInnerWidth = window.innerWidth;\n                    lastInnerHeight = window.innerHeight;\n                    noChangeCount = 0;\n                }\n            });\n            timeout = setTimeout(function() {\n                // The timeout happened first.\n                end();\n            }, noEndTimeout);\n        });\n\n        return that;\n    },\n    init: function() {\n        var that = this;\n        that.cssInit().eventInit();\n        that.initGUI()\n        that.initAudioCanvas();\n    }\n};\nwindow.onload = function() {\n    window.h5.init();\n};\n\n//Stats JavaScript Performance Monitor\n\n//import Stats from 'stats.js';\n//showStats();\n// function showStats() {\n//     var stats = new Stats();\n//     stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n//     var fs = document.createElement('div');\n//     fs.style.position = 'absolute';\n//     fs.style.left = 0;\n//     fs.style.top = 0;\n//     fs.style.zIndex = 999;\n//     fs.appendChild(stats.domElement);\n//     document.body.appendChild(fs);\n\n//     function animate() {\n//         stats.begin();\n//         // monitored code goes here\n//         stats.end();\n//         requestAnimationFrame(animate);\n//     }\n//     requestAnimationFrame(animate);\n// }"],"sourceRoot":""}