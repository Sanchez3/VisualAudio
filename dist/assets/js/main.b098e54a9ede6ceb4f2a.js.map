{"version":3,"sources":["webpack:///./src/assets/js/main.js","webpack:///./src/assets/js/entities/BufferLoader.js"],"names":["audioContext","sourceNode","analyserNode","javascriptNode","BufferLoader","context","urlList","callback","this","onload","bufferList","Array","loadCount","prototype","loadBuffer","url","index","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","length","alert","error","onerror","send","load","i","window","AudioContext","webkitAudioContext","mozAudioContext","dataArray","startedAt","pausedAt","audioData","audioPlaying","sampleSize","e","playSound","Date","now","start","loop","h5","FizzyText","drawBar","drawWave","barColor","waveColor","play","createBufferSource","createAnalyser","createScriptProcessor","Uint8Array","frequencyBinCount","connect","destination","onaudioprocess","ticker","bufferlist","pause","stop","initGUI","that","gui","dat_gui_module","f1","addFolder","setChecked","prop","n","add","listen","onChange","addColor","f2","initAudioCanvas","app","PIXI","Application","width","height","document","getElementById","appendChild","view","w","h","graphics","Graphics","basicText","Text","fill","x","y","stage","addChild","clear","Ticker","deltaTime","getByteTimeDomainData","bufferLength","sliceWidth","beginFill","lineStyle","moveTo","lineTo","endFill","getByteFrequencyData","barWidth","barHeight","drawRect","isPc","userAgentInfo","navigator","userAgent","Agents","flag","v","indexOf","rootResize","wFsize","wWidth","screen","innerWidth","wHeight","innerHeight","getElementsByTagName","style","fontSize","eventInit","addEventListener","passive","preventDefault","cssInit","interval","timeout","end","lastInnerWidth","lastInnerHeight","noChangeCount","clearInterval","clearTimeout","setInterval","setTimeout","init"],"mappings":"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","file":"assets/js/main.b098e54a9ede6ceb4f2a.js","sourcesContent":["/**\n * Created by sanchez \n */\n'use strict';\n\n//check the environment\n// if (process.env.NODE_ENV !== 'production') {\n//     console.log('Looks like we are in development mode!');\n// }\nimport * as dat from 'dat.gui';\n// import CSS\n\nimport css from '../css/css.css';\n\n\n//ES6 Module\nimport 'pixi.js';\nimport BufferLoader from './entities/BufferLoader.js';\n\n\n// var player = new Tone.Player({\n//     \"url\": \"/assets/media/bgm1.mp3\",\n//     \"loop\": true\n// }).toMaster();\n\n// var fft = new Tone.Analyser('fft', 64);\n// player.fan(fft);\n// var fftArray = fft.getValue()\n\n\nwindow.AudioContext = (function() {\n    return window.webkitAudioContext || window.AudioContext || window.mozAudioContext;\n})();\n\n// Global Variables for Audio\nvar audioContext;\nvar audioBuffer;\nvar sourceNode;\nvar analyserNode;\nvar javascriptNode;\nvar source;\nvar audioData = null;\nvar audioPlaying = false;\nvar sampleSize = 1024; // number of samples to collect before analyzing data\nvar dataArray; // array to hold time-domain/byte-frequency data\nvar startedAt;\nvar pausedAt;\nvar audioUrl = './assets/media/bgm1.mp3';\n\nfunction setupAudioNodes() {\n    sourceNode = audioContext.createBufferSource();\n    analyserNode = audioContext.createAnalyser();\n    javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n    // Create the array for the data values\n    dataArray = new Uint8Array(analyserNode.frequencyBinCount);\n    // Now connect the nodes together\n    sourceNode.connect(audioContext.destination);\n    sourceNode.connect(analyserNode);\n    analyserNode.connect(javascriptNode);\n    javascriptNode.connect(audioContext.destination);\n}\n\ntry {\n    audioContext = new AudioContext();\n} catch (e) {\n    alert('Your browser does not support AudioContext!');\n    console.error(e);\n}\n\nfunction onError(e) {\n    console.log(e);\n}\n\n//Load the audio from the URL via Ajax and store it in global variable audioData\n//Note that the audio load is asynchronous\nvar bufferLoader;\nfunction loadSound(urlList) {\n    bufferLoader = new BufferLoader(audioContext, urlList, function(bufferlist) {\n        audioData = bufferlist[0];\n        playSound(audioData);\n    })\n    bufferLoader.load();\n\n    // var request = new XMLHttpRequest();\n    // request.open('GET', url, true);\n    // request.responseType = 'arraybuffer';\n    // // When loaded, decode the data and play the sound\n    // request.onload = function() {\n    //     audioContext.decodeAudioData(request.response, function(buffer) {\n    //         audioData = buffer;\n    //         playSound(audioData);\n    //     }, onError);\n    // }\n    // request.send();\n}\n//Play the audio and loop until stopped\nfunction playSound(buffer) {\n    sourceNode.buffer = buffer;\n\n    if (pausedAt) {\n        startedAt = Date.now() - pausedAt;\n        sourceNode.start(0, pausedAt / 1000);\n    } else {\n        startedAt = Date.now();\n        sourceNode.start(0); // Play the sound now\n    }\n\n    sourceNode.loop = true;\n    audioPlaying = true;\n}\n\n\n\nvar audioLoaded = false;\nwindow.h5 = {\n    FizzyText: {\n        drawBar: false,\n        drawWave: true,\n        barColor: 0xFFFFFF,\n        waveColor: 0xFFFFFF,\n        play: function() {\n            if (audioPlaying) return;\n\n            // var audio = document.getElementById('audio');\n            // audio.play();\n            //Set up the audio Analyser, the Source Buffer and javascriptNode\n            setupAudioNodes();\n            //setup the event handler that is triggered every time enough samples have been collected\n            //trigger the audio analysis and draw the results\n            javascriptNode.onaudioprocess = function() {\n\n                //draw the display if the audio is playing\n                if (audioPlaying == true) {\n                    // requestAnimFrame(drawTimeDomain);\n                    // console.log(window.h5.ticker)\n                    window.h5.ticker.start();\n\n                }\n            }\n            //Load the Audio the first time through, otherwise play it from the buffer\n            if (audioData == null) {\n                loadSound([audioUrl]);\n            } else {\n                playSound(audioData);\n            }\n\n            //tone.js\n            // player.load('/assets/media/bgm1.mp3',function(){\n            //     player.start();\n            //     audioLoaded=true\n            // })\n        },\n        pause: function() {\n            sourceNode.stop(0);\n            audioPlaying = false;\n            pausedAt = Date.now() - startedAt;\n            // var audio = document.getElementById('audio');\n            // audio.pause();\n        }\n    },\n    initGUI: function() {\n        var that = this;\n        var gui = new dat.GUI();\n        var f1 = gui.addFolder('SineWave');\n\n        function setChecked(prop) {\n            var n = that.FizzyText[prop];\n            if (n) {\n                that.FizzyText['drawBar'] = false;\n                that.FizzyText['drawWave'] = false;\n            }\n            that.FizzyText[prop] = n;\n        }\n        f1.add(that.FizzyText, 'drawWave').listen().onChange(function() {\n            setChecked('drawWave')\n        });\n        f1.addColor(that.FizzyText, 'waveColor');\n\n        var f2 = gui.addFolder('Frequency Bar')\n        f2.add(that.FizzyText, 'drawBar').listen().onChange(function() {\n            setChecked('drawBar')\n        });;\n        f2.addColor(that.FizzyText, 'barColor');\n\n        gui.add(that.FizzyText, 'play');\n        gui.add(that.FizzyText, 'pause');\n\n    },\n    initAudioCanvas: function() {\n        var that = this;\n\n\n\n\n        // var analyser = audioCtx.createAnalyser();\n        // // analyser.connect(audioCtx.destination);\n        // //确定频域的FFT的大小\n        // analyser.fftSize = 2048;\n        // //fftSize一半，用于可视化的数据量的数量\n        // var bufferLength = analyser.frequencyBinCount;\n        // //创建无符号字节数组\n        // var dataArray = new Uint8Array(bufferLength);\n        // var audio = document.getElementById('audio');\n        // source = audioCtx.createMediaElementSource(audio);\n        // source.connect(analyser);\n\n        // audio.addEventListener('canplaythrough', function() {\n        //     audio.removeEventListener('canplaythrough', this);\n        //     source = audioCtx.createMediaElementSource(audio);\n        //     source.connect(analyser);\n        //     analyser.connect(audioCtx.destination);\n        //     audioLoaded = true;\n        // })\n\n\n\n        //当前频域数据\n        // analyser.getByteFrequencyData(dataArray)\n\n        //将当前波形，或者时域数据拷贝\n        // analyser.getByteTimeDomainData(dataArray);\n\n        //Create a Pixi Application\n        var app = new PIXI.Application({ width: 800, height: 600 });\n        //Add the canvas that Pixi automatically created for you to the HTML document\n        document.getElementById('canvas-wrapper').appendChild(app.view);\n        var w = 800;\n        var h = 600;\n        var graphics = new PIXI.Graphics();\n\n        var basicText = new PIXI.Text('Note: Mobile for now too!!!', { fill: '#FFF' });\n        basicText.x = 10;\n        basicText.y = 10;\n\n        app.stage.addChild(basicText);\n\n\n        graphics.clear();\n\n        app.stage.addChild(graphics);\n\n        function drawBar() {\n\n            //tone.js\n            // var fftValues = fft.getValue ();\n            //get frequency data and put it into the array created above\n            //当前频域数据\n            analyserNode.getByteFrequencyData(dataArray);\n            // console.log(dataArray)\n            var bufferLength = analyserNode.frequencyBinCount;\n\n            graphics.clear();\n            graphics.beginFill(that.FizzyText.barColor);\n\n            var barWidth = (w / bufferLength) * 10;\n            var barHeight = 0;\n            var x = 0;\n\n            for (var i = 0; i < bufferLength; i++) {\n                //tone.js\n                // barHeight = fftValues[i]/255 * h;\n                barHeight = dataArray[i];\n                graphics.drawRect(x, h / 2 - barHeight / 2, barWidth, barHeight / 2);\n\n                x += barWidth + 1;\n            }\n\n        }\n\n        function drawWave() {\n\n            //get waveform data and put it into the array created above\n            //将当前波形，或者时域数据拷贝\n            analyserNode.getByteTimeDomainData(dataArray);\n\n            var bufferLength = analyserNode.frequencyBinCount;\n            graphics.clear();\n            var sliceWidth = w * 1.0 / bufferLength;\n            var x = 0;\n            graphics.beginFill();\n            graphics.lineStyle(2, that.FizzyText.waveColor, 1);\n            // console.log(dataArray)\n            for (var i = 0; i < bufferLength; i++) {\n                var v = dataArray[i] / 128.0;\n                var y = v * h / 2;\n\n                if (i === 0) {\n                    // graphics.clear();\n                    graphics.moveTo(x, y);\n                } else {\n                    graphics.lineTo(x, y);\n                }\n                x += sliceWidth;\n            }\n            graphics.lineTo(w, h / 2);\n            graphics.endFill();\n        }\n\n        that.ticker = new PIXI.ticker.Ticker();\n        that.ticker.stop();\n        that.ticker.add((deltaTime) => {\n\n            if (that.FizzyText.drawWave) {\n                drawWave();\n                return;\n            }\n            if (that.FizzyText.drawBar) {\n                drawBar();\n                return;\n            }\n        });\n        // ticker.start();\n        // audio.play();\n        // audio.addEventListener('play', function() {\n        //     console.log('play');\n        //     ticker.start();\n        // })\n        // audio.addEventListener('pause', function() {\n        //     console.log('pause');\n        //     // ticker.stop();\n        // })\n\n    },\n    isPc: function() {\n        var userAgentInfo = navigator.userAgent;\n        var Agents = new Array('Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod');\n        var flag = true;\n        for (var v = 0; v < Agents.length; v++) {\n            if (userAgentInfo.indexOf(Agents[v]) > 0) { flag = false; break; }\n        }\n        return flag;\n    },\n    rootResize: function() {\n        var wFsize;\n\n        //iphone6/6s/7/8 orientation=portrait screen.width=750px screen.height=1334px / WeChat window.innerWidth=750px window.innerHeight=1206px \n        var wWidth = (window.screen.width > 0) ? (window.innerWidth >= window.screen.width || window.innerWidth == 0) ? screen.width :\n            window.innerWidth : window.innerWidth;\n        var wHeight = (window.screen.height > 0) ? (window.innerHeight >= window.screen.height || window.innerHeight == 0) ?\n            window.screen.height : window.innerHeight : window.innerHeight;\n        // var wWidth = window.innerWidth;\n        // var wHeight = window.innerHeight;\n\n        if (wWidth > wHeight) {\n            wFsize = wHeight / 750 * 100;\n        } else {\n            wFsize = wWidth / 750 * 100;\n        }\n        document.getElementsByTagName('html')[0].style.fontSize = wFsize + 'px';\n    },\n    eventInit: function() {\n        var that = this;\n        document.addEventListener('touchstart', function(e) {}, { passive: false });\n        document.addEventListener('touchmove', function(e) {\n            e.preventDefault();\n        }, { passive: false });\n        return that;\n    },\n    cssInit: function() {\n        var that = this;\n        var noChangeCountToEnd = 100,\n            noEndTimeout = 1000;\n        that.rootResize();\n        window.addEventListener('onorientationchange' in window ? 'orientationchange' : 'resize', function() {\n            var interval,\n                timeout,\n                end,\n                lastInnerWidth,\n                lastInnerHeight,\n                noChangeCount;\n            end = function() {\n                // \"orientationchangeend\"\n                clearInterval(interval);\n                clearTimeout(timeout);\n                interval = null;\n                timeout = null;\n                that.rootResize();\n            };\n            interval = setInterval(function() {\n                if (window.innerWidth === lastInnerWidth && window.innerHeight === lastInnerHeight) {\n                    noChangeCount++;\n                    if (noChangeCount === noChangeCountToEnd) {\n                        // The interval resolved the issue first.\n                        end();\n                    }\n                } else {\n                    lastInnerWidth = window.innerWidth;\n                    lastInnerHeight = window.innerHeight;\n                    noChangeCount = 0;\n                }\n            });\n            timeout = setTimeout(function() {\n                // The timeout happened first.\n                end();\n            }, noEndTimeout);\n        });\n\n        return that;\n    },\n    init: function() {\n        var that = this;\n        that.cssInit().eventInit();\n        that.initGUI()\n        that.initAudioCanvas();\n    }\n};\nwindow.onload = function() {\n    window.h5.init();\n};\n\n//Stats JavaScript Performance Monitor\n\n//import Stats from 'stats.js';\n//showStats();\n// function showStats() {\n//     var stats = new Stats();\n//     stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n//     var fs = document.createElement('div');\n//     fs.style.position = 'absolute';\n//     fs.style.left = 0;\n//     fs.style.top = 0;\n//     fs.style.zIndex = 999;\n//     fs.appendChild(stats.domElement);\n//     document.body.appendChild(fs);\n\n//     function animate() {\n//         stats.begin();\n//         // monitored code goes here\n//         stats.end();\n//         requestAnimationFrame(animate);\n//     }\n//     requestAnimationFrame(animate);\n// }","export default function BufferLoader(context, urlList, callback) {\n    this.context = context;\n    this.urlList = urlList;\n    this.onload = callback;\n    this.bufferList = new Array();\n    this.loadCount = 0;\n}\n\nBufferLoader.prototype.loadBuffer = function(url, index) {\n    // Load buffer asynchronously\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n\n    var loader = this;\n\n    request.onload = function() {\n        // Asynchronously decode the audio file data in request.response\n        loader.context.decodeAudioData(\n            request.response,\n            function(buffer) {\n                if (!buffer) {\n                    alert('error decoding file data: ' + url);\n                    return;\n                }\n                loader.bufferList[index] = buffer;\n                if (++loader.loadCount == loader.urlList.length)\n                    loader.onload(loader.bufferList);\n            },\n            function(error) {\n                console.error('decodeAudioData error', error);\n            }\n        );\n    }\n\n    request.onerror = function() {\n        alert('BufferLoader: XHR error');\n    }\n\n    request.send();\n}\n\nBufferLoader.prototype.load = function() {\n    for (var i = 0; i < this.urlList.length; ++i)\n        this.loadBuffer(this.urlList[i], i);\n}"],"sourceRoot":""}